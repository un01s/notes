<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Compiler on un01s notes</title>
    <link>https://un01s.github.io/notes/tags/compiler/</link>
    <description>Recent content in Compiler on un01s notes</description>
    <generator>Hugo -- 0.146.7</generator>
    <language>en</language>
    <lastBuildDate>Sun, 30 Mar 2025 12:47:26 -0600</lastBuildDate>
    <atom:link href="https://un01s.github.io/notes/tags/compiler/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>20250330</title>
      <link>https://un01s.github.io/notes/posts/20250330/</link>
      <pubDate>Sun, 30 Mar 2025 12:47:26 -0600</pubDate>
      <guid>https://un01s.github.io/notes/posts/20250330/</guid>
      <description>&lt;h2 id=&#34;cfg-in-ssa-form&#34;&gt;CFG in SSA form&lt;/h2&gt;
&lt;p&gt;A CFG in SSA form is a representation where each variable is assigned a value only once within the CFG, and each use of a variable refers to the most recent definition, ensuring simpler analysis and optimization.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CFG&lt;/strong&gt;: control flow graph
&lt;strong&gt;SSA&lt;/strong&gt;: static single assignment&lt;/p&gt;
&lt;p&gt;A CFG is a graph that represents the control flow of a program. Nodes in the CFG represent basic blocks (sequences of instructions that execute sequentially without branches), and edges represent the possible execution paths between those blocks.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
