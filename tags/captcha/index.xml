<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Captcha on un01s notes</title>
    <link>https://un01s.github.io/notes/tags/captcha/</link>
    <description>Recent content in Captcha on un01s notes</description>
    <generator>Hugo -- 0.146.7</generator>
    <language>en</language>
    <lastBuildDate>Thu, 06 Feb 2025 13:23:13 -0700</lastBuildDate>
    <atom:link href="https://un01s.github.io/notes/tags/captcha/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>20250206</title>
      <link>https://un01s.github.io/notes/posts/20250206/</link>
      <pubDate>Thu, 06 Feb 2025 13:23:13 -0700</pubDate>
      <guid>https://un01s.github.io/notes/posts/20250206/</guid>
      <description>&lt;h2 id=&#34;how-to-use-an-captcha-image-as-a-sing-in-and-verification-button-without-javascript&#34;&gt;How to use an captcha image as a sing-in and verification button without JavaScript?&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input_type&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;=&amp;#34;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;this image supplements the &lt;code&gt;&amp;lt;input type=&amp;quot;submit&amp;quot;&amp;gt;&lt;/code&gt; element. Click the image submits the form with two query parameters included: &lt;code&gt;?x=32&amp;amp;y=48&lt;/code&gt;. Using CSRF tokens, the server knows where it put your open circle.&lt;/p&gt;
&lt;p&gt;Other sites implement the Captcha in other creative ways. One uses an &lt;code&gt;&amp;lt;input type=&amp;quot;range&amp;quot;&amp;gt;&lt;/code&gt; to position an image to the correct place.&lt;/p&gt;
&lt;p&gt;The most impressive one uses a series of checkboxes positioned in the exact same place. When a checkbox is checked, that box is hidden and the next one is shown. Based on what box is checked, images are repositioned with CSS. You then type the parts of the URL that have stars covering them in the scrambled image â€” another anti-phishing strategy.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
