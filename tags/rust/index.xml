<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Rust on un01s notes</title>
    <link>https://un01s.github.io/notes/tags/rust/</link>
    <description>Recent content in Rust on un01s notes</description>
    <generator>Hugo -- 0.146.7</generator>
    <language>en</language>
    <lastBuildDate>Thu, 20 Feb 2025 10:26:20 -0700</lastBuildDate>
    <atom:link href="https://un01s.github.io/notes/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>no-std Rust and others</title>
      <link>https://un01s.github.io/notes/posts/20250220/</link>
      <pubDate>Thu, 20 Feb 2025 10:26:20 -0700</pubDate>
      <guid>https://un01s.github.io/notes/posts/20250220/</guid>
      <description>&lt;h2 id=&#34;ugly-code&#34;&gt;&lt;a href=&#34;https://lucumr.pocoo.org/2025/2/20/ugly-code/&#34;&gt;ugly code&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Perfect code doesn&amp;rsquo;t guarantee success if you haven&amp;rsquo;t solved a real problem for real people. Pursuing elegance in a vacuum leads to abandoned side projects or frameworks nobody uses. By contrast, clunky but functional code often comes with just the right compromises for quick iteration. And that in turn means a lot of messy code powers products that people love â€” something that&amp;rsquo;s a far bigger challenge.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Are you shipping a product and racing to meet user needs? Or are you building a reusable library or framework meant to stand the test of time?&lt;/p&gt;</description>
    </item>
    <item>
      <title>rustup</title>
      <link>https://un01s.github.io/notes/posts/20240907/</link>
      <pubDate>Sat, 07 Sep 2024 09:56:25 -0600</pubDate>
      <guid>https://un01s.github.io/notes/posts/20240907/</guid>
      <description>&lt;p&gt;Update rust&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ rustc --version
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;rustc 1.78.0 (9b00956e5 2024-04-29)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ rustup update
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ rustc --version
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;rustc 1.81.0 (eeb90cda1 2024-09-04)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Start to play with &lt;a href=&#34;https://github.com/tauri-apps/tauri&#34;&gt;Tauri: node.js + rust =&amp;gt; GUI App&lt;/a&gt;. There are examples of deno and tauri.&lt;/p&gt;
&lt;p&gt;Another interesting thing is &lt;a href=&#34;https://github.com/webui-dev/webui&#34;&gt;WebUI in C with WebSocket&lt;/a&gt;, that uses browser as the GUI.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rust on esp32</title>
      <link>https://un01s.github.io/notes/posts/20220111/</link>
      <pubDate>Tue, 11 Jan 2022 15:18:20 -0600</pubDate>
      <guid>https://un01s.github.io/notes/posts/20220111/</guid>
      <description>&lt;p&gt;Start to look at the toolchain for Rust on ESP32 family modules. After some googling, here is the first result.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;rust-esp32-a&#34; loading=&#34;lazy&#34; src=&#34;https://un01s.github.io/notes/rust-esp32.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Clearly the toolchain is working in its early stage. &lt;code&gt;$ cargo build&lt;/code&gt; OK. Both &lt;code&gt;espflash&lt;/code&gt; and &lt;code&gt;espmonitor&lt;/code&gt; are working.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;rust-esp32-b&#34; loading=&#34;lazy&#34; src=&#34;https://un01s.github.io/notes/rust-on-esp32.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Reference:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kerkour.com/rust-on-esp32/&#34;&gt;Rust on ESP32&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ivmarkov/rust-esp32-std-demo&#34;&gt;rust esp32 std demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
