<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Code on un01s notes</title>
    <link>https://un01s.github.io/notes/tags/code/</link>
    <description>Recent content in Code on un01s notes</description>
    <generator>Hugo -- 0.146.7</generator>
    <language>en</language>
    <lastBuildDate>Sat, 24 Feb 2024 13:00:41 -0700</lastBuildDate>
    <atom:link href="https://un01s.github.io/notes/tags/code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>notes on SICP</title>
      <link>https://un01s.github.io/notes/posts/20240224/</link>
      <pubDate>Sat, 24 Feb 2024 13:00:41 -0700</pubDate>
      <guid>https://un01s.github.io/notes/posts/20240224/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&amp;hellip; three foci of phenomena: the human mind, collections of computer programs, and the computer. Every computer program is a model, hatched in the mind, of a real or mental process. These processes, arising from human experience and thought, are huge in number, intricate in detail, and at any time only partially understood. They are modeled to our permanent satisfaction rarely by our computer programs. Thus even though our programs are carefully handcrafted discrete collections of symbols, mosaics of interlocking functions, they continually evolve: we change them as our perception of the model deepens, enlarges, generalizes until the model ultimately attains a metastable place within still another model with which we struggle.&lt;/p&gt;</description>
    </item>
    <item>
      <title>codes of interest</title>
      <link>https://un01s.github.io/notes/posts/20230125/</link>
      <pubDate>Wed, 25 Jan 2023 09:51:23 -0700</pubDate>
      <guid>https://un01s.github.io/notes/posts/20230125/</guid>
      <description>&lt;p&gt;Sometimes you just want to hear these flipping sound. Here is the code for both Flip 7-segment digits and FlipDot.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/owenmcateer/FlipDigits&#34;&gt;FlipDigits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/owenmcateer/FlipDots&#34;&gt;FlipDots&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another interesting thing is &lt;a href=&#34;https://github.com/owenmcateer/tixy.land-display&#34;&gt;LED display of tixy.land&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://apollolabsblog.hashnode.dev/rust-ffi-and-cbindgen-integrating-embedded-rust-code-in-c&#34;&gt;Rust FFI and cbindgen: integrating embedded rust code in C&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://tratt.net/laurie/blog/&#34;&gt;Distinguishing an interpreter from a compiler, Jan 26, 2023&lt;/a&gt;. This leads to the excellent course, &lt;a href=&#34;http://www.wolczko.com/CS294/index.html&#34;&gt;UCB CS294-113: Virtual machine and managed runtimes&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Quine program</title>
      <link>https://un01s.github.io/notes/posts/20220904/</link>
      <pubDate>Sun, 04 Sep 2022 13:02:40 -0600</pubDate>
      <guid>https://un01s.github.io/notes/posts/20220904/</guid>
      <description>&lt;h2 id=&#34;definition-of-quine&#34;&gt;Definition of Quine&lt;/h2&gt;
&lt;p&gt;A quine program, or quine, is a program that outputs its own source code when runs without taking any input. It is called self-replicating program. Quines are possible in any Turing-complete programming language, as direct consequence of Kleene&amp;rsquo;s rescursion theorem.&lt;/p&gt;
&lt;h2 id=&#34;detour&#34;&gt;Detour&lt;/h2&gt;
&lt;p&gt;Quine&amp;rsquo;s paradox on self-reference.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;#34;Yields falsehood when preceded by its quotation&amp;#34; yields falsehood when preceded by its quotation.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Another paradox:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;If the human brain were so simple that we could understand it, we would be so si
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mple that we couldn&amp;#39;t. - Emerson M. Pugh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Another amusing quote:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Toit Imports</title>
      <link>https://un01s.github.io/notes/posts/20220303/</link>
      <pubDate>Thu, 03 Mar 2022 14:44:04 -0600</pubDate>
      <guid>https://un01s.github.io/notes/posts/20220303/</guid>
      <description>&lt;p&gt;Toitlang uses import to use code from other libraries.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;local import starting with .&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ tree
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;└── my_lib
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ├── my_lib.toit
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ├── other.toit
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    └── sub
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        └── sub.toit
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Assume we are importing sub.toit into my_lib.toit.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;import .sub.sub
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Shorten version:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;import .sub
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;global import&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;import math
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then for customizations,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;import math as m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;import math show sin cos
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Reading Toit Code (002)</title>
      <link>https://un01s.github.io/notes/posts/20220301/</link>
      <pubDate>Tue, 01 Mar 2022 14:47:53 -0600</pubDate>
      <guid>https://un01s.github.io/notes/posts/20220301/</guid>
      <description>&lt;p&gt;After &lt;code&gt;toit_start()&lt;/code&gt;, we have &lt;code&gt;toit_esp32.cc&lt;/code&gt; to read. The first one is &lt;code&gt;toit::start()&lt;/code&gt;. Toit here is just a namespace. As we know that toit supports OTA (over-the-air update) through WiFi and esp32 device is set to be a station (STA instead of AP).&lt;/p&gt;
&lt;p&gt;What we have here is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RtcMemory::set_up();&lt;/li&gt;
&lt;li&gt;FlashRegistry::set_up();&lt;/li&gt;
&lt;li&gt;OS::set_up();&lt;/li&gt;
&lt;li&gt;esp_partition_find_first();&lt;/li&gt;
&lt;li&gt;setup_program(support_ota);&lt;/li&gt;
&lt;li&gt;Scheduler::ExitState exit_state;&lt;/li&gt;
&lt;li&gt;VM vm;&lt;/li&gt;
&lt;li&gt;vm.load_platform_event_sources();&lt;/li&gt;
&lt;li&gt;int groud_id = vm.scheduler()-&amp;gt;next_group_id();&lt;/li&gt;
&lt;li&gt;exit_state = vm.scheduler()-&amp;gt;run_boot_program(program, null, group_id);&lt;/li&gt;
&lt;li&gt;OS::tear_down();&lt;/li&gt;
&lt;li&gt;FlashRegistry::tear_down();&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After these, esp32 may go to deep sleep.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Reading Toit Code (001)</title>
      <link>https://un01s.github.io/notes/posts/20220225/</link>
      <pubDate>Fri, 25 Feb 2022 14:51:27 -0600</pubDate>
      <guid>https://un01s.github.io/notes/posts/20220225/</guid>
      <description>&lt;p&gt;When I started to port the code to ESP32S3 following the example of ESP32C3, I realized I had to read the code closely. Here are the notes along the way.&lt;/p&gt;
&lt;h2 id=&#34;where-does-the-code-get-started-on-esp32&#34;&gt;Where does the code get started on esp32?&lt;/h2&gt;
&lt;p&gt;Based on esp-idf, Toit (I like to pronounce it as tight) creates a new platform with a new programming language for developers.&lt;/p&gt;
&lt;p&gt;For the code to start on the esp32 device, check all the files inside &lt;code&gt;toolchains/esp32/&lt;/code&gt;. They contains all the building details for esp32. Inside its subfolder &lt;code&gt;main&lt;/code&gt;, there is a &lt;code&gt;toit.c&lt;/code&gt;. The function &lt;code&gt;app_main()&lt;/code&gt; is the entry point. Inside &lt;code&gt;toit_start()&lt;/code&gt; is called.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
