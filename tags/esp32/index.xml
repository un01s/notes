<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Esp32 on un01s notes</title>
    <link>https://un01s.github.io/notes/tags/esp32/</link>
    <description>Recent content in Esp32 on un01s notes</description>
    <generator>Hugo -- 0.146.7</generator>
    <language>en</language>
    <lastBuildDate>Sun, 16 Oct 2022 18:46:09 -0600</lastBuildDate>
    <atom:link href="https://un01s.github.io/notes/tags/esp32/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>esp32 sdcard</title>
      <link>https://un01s.github.io/notes/posts/20221016/</link>
      <pubDate>Sun, 16 Oct 2022 18:46:09 -0600</pubDate>
      <guid>https://un01s.github.io/notes/posts/20221016/</guid>
      <description>&lt;p&gt;Here is &lt;a href=&#34;https://github.com/espressif/esp-idf/tree/ad60568151ae3226375ddb05f33c067213048404/examples/storage/sd_card&#34;&gt;SD example code&lt;/a&gt; from esp-idf. Here is &lt;a href=&#34;https://github.com/espressif/esp-idf/blob/4fc411e744a87efb68993ff4d7560750f7f96dc9/components/fatfs/src/ffconf.h&#34;&gt;one header file for esp32 fatfs&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use 4-line SD mode, consider the 10K pullup resistors on data lines&lt;/li&gt;
&lt;li&gt;code page: FF_CODE_PAGE : CONFIG_FATFS_CODEPAGE
&lt;ul&gt;
&lt;li&gt;437 US&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What is the biggest micro SD card for esp32 fatfs? 16GB?&lt;/p&gt;
&lt;p&gt;FAT = file allocation table&lt;/p&gt;
&lt;p&gt;FAT32 individual files on a FAT32 drive cannot exceed 4GB size limit.
FAT32 partition must be less than 8TB.&lt;/p&gt;
&lt;p&gt;exFAT file system: extended file allocation table.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Use Jaguar to update</title>
      <link>https://un01s.github.io/notes/posts/20220117/</link>
      <pubDate>Mon, 17 Jan 2022 15:05:41 -0600</pubDate>
      <guid>https://un01s.github.io/notes/posts/20220117/</guid>
      <description>&lt;p&gt;Use an Airport to setup a WiFi network. Then download the binary of Jaguar. Run the following commands one after another. The second command requires the WiFi credentials. Use &lt;code&gt;CTRL+C&lt;/code&gt; to stop the third one. To run the forth and the fifth command, put your computer on the same WiFi network as the esp32 device.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$./jag setup
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$./jag flash
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$./jag monitor
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$./jag scan
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$./jag run hello.toit
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt=&#34;Jaguar M5Core2&#34; loading=&#34;lazy&#34; src=&#34;https://un01s.github.io/notes/jag-touch0.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Jaguar M5Core2&#34; loading=&#34;lazy&#34; src=&#34;https://un01s.github.io/notes/jag-touch1.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>wasm3 on esp32</title>
      <link>https://un01s.github.io/notes/posts/20220116/</link>
      <pubDate>Sun, 16 Jan 2022 15:11:45 -0600</pubDate>
      <guid>https://un01s.github.io/notes/posts/20220116/</guid>
      <description>&lt;p&gt;Stumbled on &lt;a href=&#34;https://github.com/kabbi/m5-atom-wasms&#34;&gt;this repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Run the modified code on one snowflake with 25 RGB LEDs (ws2812b-2020).&lt;/p&gt;
&lt;p&gt;Check &lt;a href=&#34;https://twitter.com/un01s/status/1482841586694197248&#34;&gt;the video tweet&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rust on esp32</title>
      <link>https://un01s.github.io/notes/posts/20220111/</link>
      <pubDate>Tue, 11 Jan 2022 15:18:20 -0600</pubDate>
      <guid>https://un01s.github.io/notes/posts/20220111/</guid>
      <description>&lt;p&gt;Start to look at the toolchain for Rust on ESP32 family modules. After some googling, here is the first result.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;rust-esp32-a&#34; loading=&#34;lazy&#34; src=&#34;https://un01s.github.io/notes/rust-esp32.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Clearly the toolchain is working in its early stage. &lt;code&gt;$ cargo build&lt;/code&gt; OK. Both &lt;code&gt;espflash&lt;/code&gt; and &lt;code&gt;espmonitor&lt;/code&gt; are working.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;rust-esp32-b&#34; loading=&#34;lazy&#34; src=&#34;https://un01s.github.io/notes/rust-on-esp32.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Reference:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kerkour.com/rust-on-esp32/&#34;&gt;Rust on ESP32&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ivmarkov/rust-esp32-std-demo&#34;&gt;rust esp32 std demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
